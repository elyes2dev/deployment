raw zed config map fel dep ferl front w ykoun haka 
# kubernetes/frontend/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: elvitrina
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;
      
        # Angular routes support
        location / {
            try_files $uri $uri/ /index.html;
        }
      
        # API proxy to Spring Boot backend
        location /api/ {
            proxy_pass http://elvitrina-backend.elvitrina.svc.cluster.local:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }


----

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Global body size limit
    client_max_body_size 500M;  # Set your desired limit here

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log;

    include /etc/nginx/conf.d/*.conf;  # Include all the configs from conf.d directory
}
----

# Stage 1: Build Angular app
FROM node:20-alpine AS build

WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm install --legacy-peer-deps

# Copy app source and build
COPY . .
RUN npm run build -- --output-path=./dist/Modernize --output-hashing=all

# Stage 2: Serve with NGINX
FROM nginx:alpine

# Copy Angular build output to NGINX public directory
COPY --from=build /app/dist/Modernize /usr/share/nginx/html

# Copy NGINX config
COPY nginx.conf /etc/nginx/conf.d/default.conf
COPY nginx2.conf /etc/nginx/nginx.conf

# Expose HTTP port
EXPOSE 80

# Start NGINX directly
CMD ["nginx", "-g", "daemon off;"]


--

# Build stage
FROM maven:3.8-openjdk-17 AS build
WORKDIR /app
COPY . .
RUN mvn clean package -DskipTests

# Run stage
FROM openjdk:17-jdk-slim
WORKDIR /app
COPY --from=build /app/target/*.jar app.jar

# Create necessary directory (if used in the app)
RUN mkdir -p /app/uploads

# Expose app port
EXPOSE 8080

# Expect environment variables to be injected by Kubernetes (via Secret or ConfigMap)
ENV SPRING_DATASOURCE_URL=jdbc:mysql://mysql.database.svc.cluster.local:3306/elvitrina?allowPublicKeyRetrieval=true&useSSL=false

# Remove hardcoded credentials from Dockerfile â€” they will be injected at runtime by Kubernetes
# ENV SPRING_DATASOURCE_USERNAME=root
# ENV SPRING_DATASOURCE_PASSWORD=root

# Run the application
ENTRYPOINT ["java", "-jar", "app.jar"]